{"remainingRequest":"/home/kanglerian/Apps/kanglerian.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/kanglerian/Apps/kanglerian.github.io/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/kanglerian/Apps/kanglerian.github.io/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kanglerian/Apps/kanglerian.github.io/src/components/Features.vue?vue&type=template&id=70ee9ded&","dependencies":[{"path":"/home/kanglerian/Apps/kanglerian.github.io/src/components/Features.vue","mtime":1615625898044},{"path":"/home/kanglerian/Apps/kanglerian.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kanglerian/Apps/kanglerian.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/kanglerian/Apps/kanglerian.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kanglerian/Apps/kanglerian.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF92bS5fbSgwKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZlYXR1cmVzIiB9LCBbCiAgICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImZlYXR1cmVzIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IGp1c3RpZnktY29udGVudC1jZW50ZXIgbWItNSIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC14bC02IGNvbC0xMiB0ZXh0LWNlbnRlciIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mZWF0dXJlcyBpbWctZmx1aWQiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL2Fzc2V0cy9pbWcvcGljLnBuZyIsIGFsdDogIiIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1kZXRhaWwiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtYXV0byIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJob3VzZS10aXRsZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQYWxtIEhvdXNlIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJob3VzZS1hZGRyZXNzIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIk1lZGFuLCBrZXNhbmFhbiIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWF1dG8iIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJob3VzZS1wcmljZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIkMjUwLDUwOSIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLWRpc2NvdW50IiB9LCBbCiAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIjAlIEJPVEggRkVFIildKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC14bC02IGNvbC0xMiIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJtYi01IG10LTUiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiV2h5IFVzIFN1aXQgRm9yIFlvdSIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTEyIG1iLTMiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1yLTQiLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGZsb2F0OiAibGVmdCIgfSwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6ICIvYXNzZXRzL251bWJlci9ubzEucG5nIiwgYWxNYW5zaW9udDogIiIgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIldlIGFyZSBub3QgYXNraW5nIGZvciBhbnkgZmVlIGZyb20gYm90aCBwYXJ0eSAobGFuZGxvcmQgb3IgZXZlbiBidXllcikiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC0xMiBtYi0zIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci00IiwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBmbG9hdDogImxlZnQiIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL2Fzc2V0cy9udW1iZXIvbm8yLnBuZyIsIGFsdDogIiIgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIldlIHRha2UgY2FyZSBldmVyeSBzaW5nbGUgdGhpbmcgdGhhdCBidXllciBuZWVkIHRvIGNvbXBsZXRlIGJlZm9yZWhhbmQiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC0xMiBtYi0zIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci00IiwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBmbG9hdDogImxlZnQiIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL2Fzc2V0cy9udW1iZXIvbm8zLnBuZyIsIGFsdDogIiIgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIldlIGhlbHAgYnV5ZXIgdG8gZmluZCB0aGUgcGxhY2Ugd2l0aG91dCBoYXNzbGUgYW5kIGhlbHBpbmcgdGhlbSB3aXRoIHBhcGVyd29yayIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTEyIG1iLTMiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1yLTQiLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGZsb2F0OiAibGVmdCIgfSwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6ICIvYXNzZXRzL251bWJlci9ubzQucG5nIiwgYWx0OiAiIiB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiV2UgaGVscCBsYW5kbG9yZCB0byByZWdpc3RlciB0aGVpciBsaWNlbnNlIHRvIGdvdmVybWVudCBpbiBvcmRlciB3YW50IHRvIHNlbGwiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciB0ZXh0LWNlbnRlciBtdC01IiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb2wteGwtNCBjb2wtbWQtNCBjb2wtc20tMTIgY29sLTEyIG1iLTMiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJoMyIsIFtfYygiYiIsIFtfdm0uX3YoIjE1LDYwMCIpXSldKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCJIb3VzZSAmIEFwYXJ0bWVudCIpXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sLXhsLTQgY29sLW1kLTQgY29sLXNtLTEyIGNvbC0xMiBtYi0zIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaDMiLCBbX2MoImIiLCBbX3ZtLl92KCI1ODBLIildKV0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIlN1Y2Nlc3MgQnV5ZXIiKV0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNvbC14bC00IGNvbC1tZC00IGNvbC1zbS0xMiBjb2wtMTIgbWItMyIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImgzIiwgW19jKCJiIiwgW192bS5fdigiOTlLIildKV0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIkJlc3QgTG9jYXRpb25zIildKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}