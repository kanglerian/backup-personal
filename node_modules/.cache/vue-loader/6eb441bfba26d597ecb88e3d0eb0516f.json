{"remainingRequest":"/home/kanglerian/Apps/kanglerian.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/kanglerian/Apps/kanglerian.github.io/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/kanglerian/Apps/kanglerian.github.io/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kanglerian/Apps/kanglerian.github.io/src/components/Features.vue?vue&type=template&id=70ee9ded&","dependencies":[{"path":"/home/kanglerian/Apps/kanglerian.github.io/src/components/Features.vue","mtime":1615625859807},{"path":"/home/kanglerian/Apps/kanglerian.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kanglerian/Apps/kanglerian.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/kanglerian/Apps/kanglerian.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kanglerian/Apps/kanglerian.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF92bS5fbSgwKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZlYXR1cmVzIiB9LCBbCiAgICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImZlYXR1cmVzIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IGp1c3RpZnktY29udGVudC1jZW50ZXIgbWItNSIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC14bC02IGNvbC0xMiB0ZXh0LWNlbnRlciIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mZWF0dXJlcyBpbWctZmx1aWQiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuL2Fzc2V0cy9pbWcvcGljLnBuZyIpLCBhbHQ6ICIiIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtZGV0YWlsIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWF1dG8iIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAiaG91c2UtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUGFsbSBIb3VzZSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiaG91c2UtYWRkcmVzcyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJNZWRhbiwga2VzYW5hYW4iKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1hdXRvIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiaG91c2UtcHJpY2UiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiJDI1MCw1MDkiKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1kaXNjb3VudCIgfSwgWwogICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCIwJSBCT1RIIEZFRSIpXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wteGwtNiBjb2wtMTIiIH0sIFsKICAgICAgICAgICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAibWItNSBtdC01IiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIldoeSBVcyBTdWl0IEZvciBZb3UiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC0xMiBtYi0zIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci00IiwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBmbG9hdDogImxlZnQiIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL2Fzc2V0cy9udW1iZXIvbm8xLnBuZyIsIGFsTWFuc2lvbnQ6ICIiIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJXZSBhcmUgbm90IGFza2luZyBmb3IgYW55IGZlZSBmcm9tIGJvdGggcGFydHkgKGxhbmRsb3JkIG9yIGV2ZW4gYnV5ZXIpIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtMTIgbWItMyIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItNCIsCiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgZmxvYXQ6ICJsZWZ0IiB9LAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogIi9hc3NldHMvbnVtYmVyL25vMi5wbmciLCBhbHQ6ICIiIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJXZSB0YWtlIGNhcmUgZXZlcnkgc2luZ2xlIHRoaW5nIHRoYXQgYnV5ZXIgbmVlZCB0byBjb21wbGV0ZSBiZWZvcmVoYW5kIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtMTIgbWItMyIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItNCIsCiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgZmxvYXQ6ICJsZWZ0IiB9LAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogIi9hc3NldHMvbnVtYmVyL25vMy5wbmciLCBhbHQ6ICIiIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJXZSBoZWxwIGJ1eWVyIHRvIGZpbmQgdGhlIHBsYWNlIHdpdGhvdXQgaGFzc2xlIGFuZCBoZWxwaW5nIHRoZW0gd2l0aCBwYXBlcndvcmsiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC0xMiBtYi0zIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci00IiwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBmbG9hdDogImxlZnQiIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL2Fzc2V0cy9udW1iZXIvbm80LnBuZyIsIGFsdDogIiIgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIldlIGhlbHAgbGFuZGxvcmQgdG8gcmVnaXN0ZXIgdGhlaXIgbGljZW5zZSB0byBnb3Zlcm1lbnQgaW4gb3JkZXIgd2FudCB0byBzZWxsIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicm93IGp1c3RpZnktY29udGVudC1jZW50ZXIgdGV4dC1jZW50ZXIgbXQtNSIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sLXhsLTQgY29sLW1kLTQgY29sLXNtLTEyIGNvbC0xMiBtYi0zIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaDMiLCBbX2MoImIiLCBbX3ZtLl92KCIxNSw2MDAiKV0pXSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiSG91c2UgJiBBcGFydG1lbnQiKV0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNvbC14bC00IGNvbC1tZC00IGNvbC1zbS0xMiBjb2wtMTIgbWItMyIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImgzIiwgW19jKCJiIiwgW192bS5fdigiNTgwSyIpXSldKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCJTdWNjZXNzIEJ1eWVyIildKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb2wteGwtNCBjb2wtbWQtNCBjb2wtc20tMTIgY29sLTEyIG1iLTMiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJoMyIsIFtfYygiYiIsIFtfdm0uX3YoIjk5SyIpXSldKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCJCZXN0IExvY2F0aW9ucyIpXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}